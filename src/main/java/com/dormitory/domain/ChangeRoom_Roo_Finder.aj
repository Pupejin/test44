// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dormitory.domain;

import com.dormitory.domain.ChangeRoom;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect ChangeRoom_Roo_Finder {
    
    public static Long ChangeRoom.countFindChangeRoomsByDateChangEquals(Date dateChang) {
        if (dateChang == null) throw new IllegalArgumentException("The dateChang argument is required");
        EntityManager em = ChangeRoom.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM ChangeRoom AS o WHERE o.dateChang = :dateChang", Long.class);
        q.setParameter("dateChang", dateChang);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<ChangeRoom> ChangeRoom.findChangeRoomsByDateChangEquals(Date dateChang) {
        if (dateChang == null) throw new IllegalArgumentException("The dateChang argument is required");
        EntityManager em = ChangeRoom.entityManager();
        TypedQuery<ChangeRoom> q = em.createQuery("SELECT o FROM ChangeRoom AS o WHERE o.dateChang = :dateChang", ChangeRoom.class);
        q.setParameter("dateChang", dateChang);
        return q;
    }
    
    public static TypedQuery<ChangeRoom> ChangeRoom.findChangeRoomsByDateChangEquals(Date dateChang, String sortFieldName, String sortOrder) {
        if (dateChang == null) throw new IllegalArgumentException("The dateChang argument is required");
        EntityManager em = ChangeRoom.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM ChangeRoom AS o WHERE o.dateChang = :dateChang");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<ChangeRoom> q = em.createQuery(queryBuilder.toString(), ChangeRoom.class);
        q.setParameter("dateChang", dateChang);
        return q;
    }
    
}
