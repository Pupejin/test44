// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dormitory.domain;

import com.dormitory.domain.Customer;
import com.dormitory.domain.Payment;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Payment_Roo_Finder {
    
    public static Long Payment.countFindPaymentsByName(Customer name) {
        if (name == null) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Payment.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Payment AS o WHERE o.name = :name", Long.class);
        q.setParameter("name", name);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Payment> Payment.findPaymentsByName(Customer name) {
        if (name == null) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Payment.entityManager();
        TypedQuery<Payment> q = em.createQuery("SELECT o FROM Payment AS o WHERE o.name = :name", Payment.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Payment> Payment.findPaymentsByName(Customer name, String sortFieldName, String sortOrder) {
        if (name == null) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Payment.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Payment AS o WHERE o.name = :name");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Payment> q = em.createQuery(queryBuilder.toString(), Payment.class);
        q.setParameter("name", name);
        return q;
    }
    
}
